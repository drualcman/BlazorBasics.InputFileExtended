@namespace BlazorBasics.InputFileExtended

@if(SuccessLoad)
{
    <label @ref=InputFileReference
           @attributes=Attributes
           class="@LabelWrapperCss @(Parameters.DragAndDropOptions.CanDropFiles ? DropZoneCss : "") @(IsDropping ? Dropping : "")"
           for="@InputFileId"
           @ondragenter="DragEnter"
           @ondrop="DragLeave"
           @ondragleave="DragLeave"
           @onclick=OnClick
    >
        <InputFile multiple="@Parameters.MultiFile" class="@Parameters.InputFileCss"
                   accept="@InputFileTypes"
                   id="@InputFileId"
                   OnChange="Change" />
        @if(string.IsNullOrEmpty(SelectionInfo))
        {
            @if(InputContent is null)
            {
                <span class="choose">Choose File</span>
            }
            else
            {
                @InputContent
            }
        }
        else
        {
            @if(SelectContent is null)
            {
                <span class="info">@SelectionInfo</span>
            }
            else
            {
                @SelectContent(Files.Count)
            }
        }
    </label>

    if(Parameters.ButtonOptions.ButtonShow)
    {   
        if(!IsSaving)
        {
        <button class="@Parameters.ButtonOptions.ButtonCss" type="@Parameters.ButtonOptions.ButtonType.ToString().ToLower()"
                @onclick="FormSave" title="@Parameters.ButtonOptions.ButtonTitle">
            @if(ButtonContent is null)
            {
                <span>Upload</span>
            }
            else
            {
                @ButtonContent
            }
        </button>
        }
    }

    if(Files.Count > 0 && Parameters.ShowFileList)
    {
        <div class="@Parameters.PreviewOptions.PreviewWrapperCss">
            @for(int i = 0; i < Rows; i++)
            {
                int r = i;
                if(ChildContent is null)
                {
                    if(Parameters.PreviewOptions.ShowPreview)
                    {
                        <FilePreviewComponent File="Files[r]" Context="FileContext" Options=Parameters.PreviewOptions OnRemove="()=> Remove(Files[r])" />
                    }
                    else
                    {
                        <FileViewComponent File="Files[r]" Context="FileContext" Options=Parameters.PreviewOptions OnRemove="()=> Remove(Files[r])" />
                    }
                }
                else
                {
                    @ChildContent(Files[r])
                }
            }

        </div>
    }
}
@if(!OnError.HasDelegate)
{
    <label class="error-label">@(new MarkupString(ErrorMessages))</label>
}
@if(!string.IsNullOrEmpty(APIErrorMessages))
{
    <label class="error-label">@(new MarkupString(APIErrorMessages))</label>
}


